
import { GoogleGenAI, Modality } from "@google/genai";
import type { OutfitStyle } from '../types';
import { fileToBase64 } from '../utils/fileUtils';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getPrompt = (style: OutfitStyle): string => {
  return `Analyze this clothing item. Create a complete '${style}' outfit that incorporates it. Generate a clean, top-down 'flat-lay' style image of the full outfit on a neutral light-colored background. The original item must be clearly visible and integrated into the flat-lay.`;
};

export const generateOutfit = async (imageFile: File, style: OutfitStyle): Promise<string> => {
  try {
    const base64Data = await fileToBase64(imageFile);
    const mimeType = imageFile.type;

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Data,
              mimeType: mimeType,
            },
          },
          {
            text: getPrompt(style),
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });
    
    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const imageMimeType = part.inlineData.mimeType;
        return `data:${imageMimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error('No image was generated by the API.');

  } catch (error) {
    console.error(`Error generating ${style} outfit:`, error);
    throw new Error(`Failed to generate the ${style} outfit. The content may have been blocked. Please try a different image.`);
  }
};
